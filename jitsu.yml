namespace: jitsu

jitsu-common:
  metadata:
    defines: metadata
    name: Jitsu
    description: Jitsu is an open-source data integration platform. Our mission is to ensure that all your business data is consolidated in a single database and ready for analytics.
    website: https://jitsu.com/
    publisher: monk.io
    icon: https://jitsu.com/img/jitsu-responsive.svg
  connections:
    jitsu-configurator:
      runnable: jitsu/jitsu-configurator
      service: jitsu-configurator
    jitsu-server:
      runnable: jitsu/jitsu-server
      service: jitsu-server
    jitsu-redis:
      runnable: jitsu/redis
      service: redis
    jitsu-redis-user-recognition:
      runnable: jitsu/redis-user-recognition
      service: redis
  variables:
    redis_host:
      type: string
      value: <- connection-hostname("jitsu-redis")
    redis_host_user_recognition:
      type: string
      value: <- connection-hostname("jitsu-redis-user-recognition")
    jitsu_server_host:
      type: string
      value: <- connection-hostname("jitsu-server")
    jitsu_configurator_host:
      type: string
      value: <- connection-hostname("jitsu-configurator")
    jitsu_redis_url:
      env: REDIS_URL
      type: string
      value: <- "redis://" connection-hostname("jitsu-redis") ":" connection-port("jitsu-redis") concat-all
    jitsu_backend_api_base:
      env: BACKEND_API_BASE
      type: string
      value: <- `redis://${redis_host}:6379`
    jitsu_user_recognition:
      env: USER_RECOGNITION_ENABLED
      type: bool
      value: true
    jitsu_user_recognition_redis:
      env: REDIS_URL
      type: string
      value: <- "redis://" connection-hostname("jitsu-redis-user-recognition") ":" connection-port("jitsu-redis-user-recognition") concat-all
    jitsu_term:
      env: TERM
      type: string
      value: xterm-256color
    jitsu_cluster_token:
      env: CLUSTER_ADMIN_TOKEN
      type: string
      value: <- `${jitsu_admin_token}`
    jitsu_server_url:
      env: JITSU_SERVER_URL
      type: string
      value: <- "http://" connection-hostname("jitsu-server") ":" connection-port("jitsu-server") concat-all
    jitsu_configuration_url:
      env: JITSU_CONFIGURATOR_URL
      type: string
      value: <- "http://" connection-hostname("jitsu-redis-user-recognition") ":" connection-port("jitsu-redis-user-recognition") concat-all
    volume_local:
      type: string
      value: <- `${monk-volume-path}/jitsu`


jitsu-configurator:
  inherits: ./jitsu-common
  defines: runnable
  containers:
    configurator:
      image: jitsucom/configurator
      ports:
        - <- `0.0.0.0:${jitsu_config_port}:7000`
      paths:
        - <- `${volume_local}/configurator/data/logs:/home/configurator/data/logs`
  depends:
    wait-for:
      runnables:
        - jitsu/redis
      timeout: 30
  services:
    jitsu-configurator:
      container: configurator
      port: <- `${jitsu_config_port}`
      protocol: tcp
      host-port: <- `${jitsu_config_port}`

jitsu-server:
  inherits: ./jitsu-common
  defines: runnable
  containers:
    server:
      image: jitsucom/server
      ports:
        - <- `0.0.0.0:${jitsu_server_port}:8001`
      paths:
        - <- `${volume_local}/configurator/data/logs:/home/configurator/data/logs`
  depends:
    wait-for:
      runnables:
        - jitsu/redis
      timeout: 30
  services:
    jitsu-server:
      container: server
      port: <- `${jitsu_server_port}`
      protocol: tcp
      host-port: <- `${jitsu_server_port}`

redis:
  defines: runnable
  containers:
    redis:     
      image: redis
  services:
    redis:
      container: redis
      port: 6379
      protocol: tcp


redis-user-recognition:
  defines: runnable
  containers:
    redis:     
      image: redis
  services:
    redis:
      container: redis
      port: 6379
      protocol: tcp