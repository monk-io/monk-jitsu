---
namespace: jitsu

jitsu-common:
  metadata:
    name: Jitsu
    description: |
      Jitsu is an open-source project that provides a platform for deploying and managing serverless applications. It is designed to simplify the process of deploying and managing serverless applications by providing a unified interface for managing multiple cloud providers. Jitsu supports a wide range of cloud providers, including AWS, Google Cloud, and Microsoft Azure.

      The Jitsu platform provides a number of features that make it easy to deploy and manage serverless applications. These include:

      1. A unified interface for managing multiple cloud providers
      2. Automatic scaling of resources based on application demand
      3. Support for multiple programming languages, including Node.js, Python, and Java
      4. Built-in monitoring and logging capabilities
      5. Integration with popular development tools, such as Git and GitHub

      Jitsu is built using open-source technologies, including Node.js, Docker, and Kubernetes. It is licensed under the Apache 2.0 license, which allows for free use and modification of the software.

      Overall, Jitsu is a powerful platform for deploying and managing serverless applications. Its open-source nature and support for multiple cloud providers make it a popular choice for developers looking to simplify their serverless deployments.

    website: https://jitsu.com/
    publisher: monk.io
    icon: https://jitsu.com/img/jitsu-responsive.svg
    private: true
  connections:
    jitsu-configurator:
      runnable: jitsu/jitsu-configurator
      service: jitsu-configurator
    jitsu-server:
      runnable: jitsu/jitsu-server
      service: jitsu-server
    jitsu-redis:
      runnable: jitsu/redis
      service: redis
    jitsu-redis-user-recognition:
      runnable: jitsu/redis-user-recognition
      service: redis
  variables:
    redis_host:
      type: string
      value: <- connection-hostname("jitsu-redis")
    redis_host_user_recognition:
      type: string
      value: <- connection-hostname("jitsu-redis-user-recognition")
    jitsu_server_host:
      type: string
      value: <- connection-hostname("jitsu-server")
    jitsu_configurator_host:
      type: string
      value: <- connection-hostname("jitsu-configurator")
    jitsu_redis_url:
      env: REDIS_URL
      type: string
      value: <- "redis://" connection-hostname("jitsu-redis") ":" connection-port("jitsu-redis") concat-all
    jitsu_backend_api_base:
      env: BACKEND_API_BASE
      type: string
      value: <- `redis://${redis_host}:6379`
    jitsu_user_recognition:
      env: USER_RECOGNITION_ENABLED
      type: bool
      value: true
    jitsu_user_recognition_redis:
      env: REDIS_URL
      type: string
      value: <- "redis://" connection-hostname("jitsu-redis-user-recognition") ":" connection-port("jitsu-redis-user-recognition") concat-all
    jitsu_term:
      env: TERM
      type: string
      value: xterm-256color
    jitsu_cluster_token:
      env: CLUSTER_ADMIN_TOKEN
      type: string
      value: monk
    jitsu_server_url:
      env: JITSU_SERVER_URL
      type: string
      value: <- "http://" connection-hostname("jitsu-server") ":" connection-port("jitsu-server") concat-all
    jitsu_configuration_url:
      env: JITSU_CONFIGURATOR_URL
      type: string
      value: <- "http://" connection-hostname("jitsu-configurator") ":" connection-port("jitsu-configurator") concat-all
    volume_local:
      type: string
      value: <- `${monk-volume-path}/jitsu`

jitsu-configurator:
  inherits: jitsu/jitsu-common
  defines: runnable
  containers:
    configurator:
      image: jitsucom/configurator
      paths:
        - <- `${volume_local}/configurator/data/logs:/home/configurator/data/logs`
  depends:
    wait-for:
      runnables:
        - jitsu/redis
      timeout: 30
  services:
    jitsu-configurator:
      container: configurator
      port: 7000
      protocol: tcp

jitsu-server:
  inherits: jitsu/jitsu-common
  defines: runnable
  containers:
    server:
      image: jitsucom/server
      paths:
        - <- `${volume_local}/configurator/data/logs:/home/configurator/data/logs`
  depends:
    wait-for:
      runnables:
        - jitsu/redis
      timeout: 30
  services:
    jitsu-server:
      container: server
      port: 8001
      protocol: tcp
      host-port: 8001

redis:
  defines: runnable
  metadata:
    name: Redis
    description: Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.
    website: https://redis.io
    publisher: monk.io
    icon: https://cdn.icon-icons.com/icons2/2415/PNG/512/redis_original_wordmark_logo_icon_146369.png
    private: true
    version: 1.0
  containers:
    redis:
      image: redis
      environment:
        - ALLOW_EMPTY_PASSWORD=yes
  services:
    redis:
      container: redis
      port: 6379
      protocol: tcp

redis-user-recognition:
  defines: runnable
  metadata:
    name: Redis
    description: Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.
    website: https://redis.io
    publisher: monk.io
    icon: https://cdn.icon-icons.com/icons2/2415/PNG/512/redis_original_wordmark_logo_icon_146369.png
    private: true
    version: 1.0
  containers:
    redis:
      image: redis
      environment:
        - ALLOW_EMPTY_PASSWORD=yes
  services:
    redis:
      container: redis
      port: 6379
      protocol: tcp
